class DogQuerierTest {
	public static void main(String[] args) {
		
		// Inner class
		// Declares a reference variable of type DoqQuerier that will refer to an
		// object from a class that implements the DoqQuerier interface. But, we don't
		// yet have a class that implements DoqQuerier, so we're creating one right here.
//		DoqQuerier dq = new DoqQuerier() {
//			public boolean test(Dog d) {
//				return d.getAge() > 9;
//			}
//		};
		
		DoqQuerier dq = d -> {
			System.out.println("Testing " + d.getAge());
			return d.getAge() > 9;
		};
		
		Dog d1 = new Dog();
		d1.setAge(12);
		System.out.println(dq.test(d1));
		
		d1.setAge(5);	
		System.out.println(dq.test(d1));
	}
}

// this is a functional interface
interface DoqQuerier {
	public boolean test(Dog d);
}

class Dog {
	int age;

	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
}

step 1: copy the parameter of test() method from the inner class
	d
		   
step 2: then write an arrow
	d -> 
		   
step 3: copy the expression in the body of method the test method, 
leaving out the return and semicolon
		   
	d -> d.getAge() > 9
	 
step 4: Assign the lambda to the instance variable.
The type of lambda expression is the same as the type of interface
and the same as the type of the instance being created by the inner class.
		   
	DoqQuerier dq = d.getAge() > 9;
		   
Note: The rule is if there is only one expression in the lambda, then the value
of that expression gets returned by default, and you don't need a return.

-- Other ways - all are valid
DogQuerier dq = (d) -> d.getAge() > 9;
DogQuerier dq = d -> d.getAge() > 9;
DogQuerier dq = (Dog d) -> d.getAge() > 9;
DogQuerier dq = d -> { return d.getAge() > 9; };